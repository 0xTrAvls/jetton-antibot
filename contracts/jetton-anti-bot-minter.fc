;; It is recommended to use https://github.com/ton-blockchain/token-contract/blob/main/ft/jetton-minter-discoverable.fc
;; instead of this contract, see https://github.com/ton-blockchain/TEPs/blob/master/text/0089-jetton-wallet-discovery.md

;; Jettons minter smart contract

;; storage scheme
;; storage#_ total_supply:Coins admin_address:MsgAddress content:^Cell jetton_wallet_code:^Cell = Storage;

(int, slice, cell, cell) load_data() inline {
  slice ds = get_data().begin_parse();
  return (
      ds~load_coins(), ;; total_supply
      ds~load_msg_addr(), ;; admin_address
      ds~load_ref(), ;; content
      ds~load_ref()  ;; jetton_wallet_code
  );
}

() save_data(int total_supply, slice admin_address, cell content, cell jetton_wallet_code) impure inline {
  set_data(begin_cell()
            .store_coins(total_supply)
            .store_slice(admin_address)
            .store_ref(content)
            .store_ref(jetton_wallet_code)
           .end_cell()
          );
}

(int, cell, cell) unpack_content(cell content) impure {
  slice ds = content.begin_parse();
  return (
    ds~load_uint(8), ;; content_type
    ds~load_ref(), ;; content_data
    ds~load_ref() ;; anti_bot_data
  );
}

(cell) pack_content(int content_type, cell content_data, cell anti_bot_data) impure {
  return(
    begin_cell()
      .store_uint(content_type, 8)
      .store_ref(content_data)
      .store_ref(anti_bot_data)
    .end_cell()
  );
}

(int, int, int, int, int, int) unpack_anti_bot_data(cell anti_bot_data) impure {
	slice ds = anti_bot_data.begin_parse();
	return (
		ds~load_coins(), ;; amount_limit_per_trade
		ds~load_coins(), ;; amount_limit_per_block
		ds~load_uint(64), ;; time_limit_per_trade
		ds~load_uint(64), ;; disable_time
		ds~load_uint(64), ;; last_block_time
		ds~load_coins() ;; last_block_amount
	);
}

(cell) pack_anti_bot_data(
	int amount_limit_per_trade, 
	int amount_limit_per_block, 
	int time_limit_per_trade, 
	int disable_time, 
	int last_block_time, 
	int last_block_amount) impure {
    return (
      begin_cell()
      .store_coins(amount_limit_per_trade)
      .store_coins(amount_limit_per_block)
      .store_uint(time_limit_per_trade, 64)
      .store_uint(disable_time, 64)
      .store_uint(last_block_time, 64)
      .store_coins(last_block_amount)
      .end_cell()
    );
}

() mint_tokens(slice to_address, int disable_time, cell jetton_wallet_code, int amount, cell master_msg) impure {
  cell state_init = calculate_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code, disable_time);
  slice to_wallet_address = calculate_jetton_wallet_address(state_init);
  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(to_wallet_address)
    .store_coins(amount)
    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
    .store_ref(state_init)
    .store_ref(master_msg);
  send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

() update_white_list(slice to_address, int disable_time, cell jetton_wallet_code, int amount, int is_white_list, int query_id) impure {
    cell state_init = calculate_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code, disable_time);
    slice to_wallet_address = calculate_jetton_wallet_address(state_init);
    var msg_body = begin_cell()
        .store_uint(op::set_white_list(), 32)
        .store_uint(query_id, 64)
        .store_int(is_white_list, 32)
        .end_cell();
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to_wallet_address)
        .store_coins(amount)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(msg_body);
    send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

() send_execute_transaction(slice receiver, int query_id, cell master_msg) impure inline {
	var msg = begin_cell()
		.store_uint(0x18, 6)
		.store_slice(receiver)
		.store_coins(0)
		.store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
		.store_uint(op::execute_transfer(), 32)
		.store_uint(query_id, 64)
		.store_ref(master_msg)
		.end_cell();
	send_raw_message(msg, 64);
}

(cell) pre_transfer_check(
	int amount_limit_per_trade, 
	int amount_limit_per_block, 
	int time_limit_per_trade, 
	int disable_time,
	int last_block_time, 
	int last_block_amount,
  cell jetton_wallet_code,
	slice from_address, 
	slice in_msg_body,
  int query_id) impure inline {

	int jetton_amount = in_msg_body~load_coins();
	int last_transaction_time = in_msg_body~load_uint(64);
  slice jetton_owner = in_msg_body~load_msg_addr();
	cell master_msg = in_msg_body~load_ref();

  throw_unless(ONLY_OWNER, 
    equal_slices(calculate_user_jetton_wallet_address(jetton_owner, my_address(), jetton_wallet_code, disable_time), from_address));

	if((now() > disable_time)) {
		send_execute_transaction(from_address, query_id, master_msg);
		return pack_anti_bot_data(amount_limit_per_trade, amount_limit_per_block, time_limit_per_trade, disable_time, last_block_time, last_block_amount);
	}

	throw_unless(TIME_DILATION_NOT_ENOUGH, last_transaction_time + time_limit_per_trade <= now());
	throw_unless(AMOUNT_LIMIT_PER_TRADE_OVERFLOW, amount_limit_per_trade >= jetton_amount);
	if(block_lt() == last_block_time) {
		last_block_amount += jetton_amount;
	} else {
		last_block_amount = jetton_amount;
	}
	throw_unless(AMOUNT_LIMIT_PER_BLOCK_OVERFLOW, amount_limit_per_block >= last_block_amount);
	send_execute_transaction(from_address, query_id, master_msg);

	return pack_anti_bot_data(amount_limit_per_trade, amount_limit_per_block, time_limit_per_trade, disable_time, last_block_time, last_block_amount);
}	

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
  
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();
    (int content_type, cell content_data, cell anti_bot_data) = unpack_content(content);
    (int amount_limit_per_trade, int amount_limit_per_block, int time_limit_per_trade, int disable_time, int last_block_time, int last_block_amount) = unpack_anti_bot_data(anti_bot_data);

    if (op == op::mint()) {
        throw_unless(73, equal_slices(sender_address, admin_address));
        slice to_address = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();
        cell master_msg = in_msg_body~load_ref();
        slice master_msg_cs = master_msg.begin_parse();
        master_msg_cs~skip_bits(32 + 64); ;; op + query_id
        int jetton_amount = master_msg_cs~load_coins();
        mint_tokens(to_address, disable_time, jetton_wallet_code, amount, master_msg);
        save_data(total_supply + jetton_amount, admin_address, content, jetton_wallet_code);
        return ();
    }

    if (op == op::burn_notification()) {
        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        throw_unless(74,
            equal_slices(calculate_user_jetton_wallet_address(from_address, my_address(), jetton_wallet_code, disable_time), sender_address)
        );
        save_data(total_supply - jetton_amount, admin_address, content, jetton_wallet_code);
        slice response_address = in_msg_body~load_msg_addr();
        if (response_address.preload_uint(2) != 0) {
          var msg = begin_cell()
            .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
            .store_slice(response_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::excesses(), 32)
            .store_uint(query_id, 64);
          send_raw_message(msg.end_cell(), 2 + 64);
        }
        return ();
    }

    if (op == op::update_white_list()) {
        throw_unless(73, equal_slices(sender_address, admin_address));
        slice to_address = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();
        int is_white_list = in_msg_body~load_int(32);
        update_white_list(to_address, disable_time, jetton_wallet_code, amount, is_white_list, query_id);
        return ();
    }

    if(op == op::pre_transfer_check()) {
        anti_bot_data = pre_transfer_check(amount_limit_per_trade, amount_limit_per_block, time_limit_per_trade, disable_time, last_block_time, last_block_amount, jetton_wallet_code, sender_address, in_msg_body, query_id);
        content = pack_content(content_type, content_data, anti_bot_data);
        save_data(total_supply, admin_address, content, jetton_wallet_code);
        return ();
    }
  
    if (op == 3) { ;; change admin
        throw_unless(73, equal_slices(sender_address, admin_address));
        slice new_admin_address = in_msg_body~load_msg_addr();
        save_data(total_supply, new_admin_address, content, jetton_wallet_code);
        return ();
    }

    if (op == 4) { ;; change content, delete this for immutable tokens
        throw_unless(73, equal_slices(sender_address, admin_address));
        save_data(total_supply, admin_address, in_msg_body~load_ref(), jetton_wallet_code);
        return ();
    }

    throw(0xffff);
}

(int, int, slice, cell, cell) get_jetton_data() method_id {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();
    return (total_supply, -1, admin_address, content, jetton_wallet_code);
}

slice get_wallet_address(slice owner_address) method_id {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();
    (int content_type, cell content_data, cell anti_bot_data) = unpack_content(content);
    (int amount_limit_per_trade, int amount_limit_per_block, int time_limit_per_trade, int disable_time, int last_block_time, int last_block_amount) = unpack_anti_bot_data(anti_bot_data);
    return calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code, disable_time);
}
