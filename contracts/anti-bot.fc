(slice, int, int, int, int, int, int, int) load_data() impure {
	cell data = get_data();
	slice ds = data.begin_parse();
	return (
		ds~load_msg_addr(), ;; owner
		ds~load_coins(), ;; amount_limit_per_trade
		ds~load_coins(), ;; amount_limit_per_block
		ds~load_uint(64), ;; delay_time
		ds~load_uint(64), ;; time_limit_per_trade
		ds~load_uint(64), ;; disable_time
		ds~load_uint(64), ;; last_block_time
		ds~load_coins() ;; last_block_amount
	);
}

() save_data(
	slice owner, 
	int amount_limit_per_trade, 
	int amount_limit_per_block, 
	int delay_time,
	int time_limit_per_trade, 
	int disable_time, 
	int last_block_time, 
	int last_block_amount) impure {

  	set_data(begin_cell()
		.store_slice(owner)
		.store_coins(amount_limit_per_trade)
		.store_coins(amount_limit_per_block)
		.store_uint(delay_time, 64)
		.store_uint(time_limit_per_trade, 64)
		.store_uint(disable_time, 64)
		.store_uint(last_block_time, 64)
		.store_coins(last_block_amount)
		.end_cell()
	);
}

() send_execute_transaction(slice receiver, int query_id, cell master_msg) impure inline {
	var msg = begin_cell()
		.store_uint(0x18, 6)
		.store_slice(receiver)
		.store_coins(0)
		.store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
		.store_uint(op::execute_transfer(), 32)
		.store_uint(query_id, 64)
		.store_ref(master_msg)
		.end_cell();
	send_raw_message(msg, 64);
}

(int) pre_transfer_check(
	int amount_limit_per_trade, 
	int amount_limit_per_block, 
	int delay_time,
	int time_limit_per_trade, 
	int disable_time,
	int last_block_time, 
	int last_block_amount,
	slice sender_address, 
	slice in_msg_body) impure inline {

	int query_id = in_msg_body~load_uint(64);
	int jetton_amount = in_msg_body~load_coins();
	int last_transaction_time = in_msg_body~load_uint(64);
	int is_white_list = in_msg_body~load_int(32);
	cell master_msg = in_msg_body~load_ref();

	if((now() > disable_time) | is_white_list) {
		send_execute_transaction(sender_address, query_id, master_msg);
		return last_block_amount;
	}

	throw_unless(TIME_DILATION_NOT_ENOUGH, last_transaction_time + delay_time <= now());
	throw_unless(AMOUNT_LIMIT_PER_TRADE_OVERFLOW, amount_limit_per_trade >= jetton_amount);
	
	if(block_lt() == last_block_time) {
		last_block_amount += jetton_amount;
	} else {
		last_block_amount = jetton_amount;
	}
	throw_unless(AMOUNT_LIMIT_PER_BLOCK_OVERFLOW, amount_limit_per_block >= last_block_amount);
	send_execute_transaction(sender_address, query_id, master_msg);

	return last_block_amount;
}	

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
		if(in_msg_body.slice_empty?()) {
        return();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();

	(slice owner, int amount_limit_per_trade, int amount_limit_per_block, int delay_time, int time_limit_per_trade, int disable_time, int last_block_time, int last_block_amount) = load_data();

	int op = in_msg_body~load_uint(32);
	
	if(op == op::pre_transfer_check()) {
		last_block_amount = pre_transfer_check(amount_limit_per_trade, amount_limit_per_block, delay_time, time_limit_per_trade, disable_time, last_block_time, last_block_amount, sender_address, in_msg_body);
		save_data(owner, amount_limit_per_trade, amount_limit_per_block, delay_time, time_limit_per_trade, disable_time, last_block_time, last_block_amount);
		return();
	}

	throw(WRONG_OP);
}

(slice, int, int, int, int, int, int, int) get_anti_bot_data() method_id {
	return load_data();
}